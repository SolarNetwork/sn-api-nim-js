{"version":3,"file":"solarnetwork-api-nim.js","sources":["../src/domain/solarNodeImageInfo.js","../src/net/nimUrlHelperMixin.js"],"sourcesContent":["/** @module domain */\n\n/**\n * An immutable NIM image info object.\n */\nclass SolarNodeImageInfo {\n  /**\n   * Constructor.\n   *\n   * @param {string} id a unique identifier for this image\n   * @param {string} sha256 hex-encoded SHA-256 digest of the image content\n   * @param {number} contentLength the content length of the image content, in bytes\n   * @param {string} uncompressedSha256 a hex-encoded SHA-256 digest of the image contents when uncompressed\n   * @param {number} uncompressedContentLength the size of the image contents when uncompressed, in bytes\n   */\n  constructor(\n    id,\n    sha256,\n    contentLength,\n    uncompressedSha256,\n    uncompressedContentLength\n  ) {\n    /**\n     * A unique identifier for this image.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.id = id;\n\n    /**\n     * A hex-encoded SHA-256 digest of the image content.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.sha256 = sha256;\n\n    /**\n     * The content length of the image content, in bytes.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.contentLength = contentLength;\n\n    /**\n     * A hex-encoded SHA-256 digest of the image contents when uncompressed.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uncompressedSha256 = uncompressedSha256;\n\n    /**\n     * The size of the image contents when uncompressed, in bytes.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.uncompressedContentLength = uncompressedContentLength;\n\n    if (this.constructor === SolarNodeImageInfo) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SolarNodeImageInfo} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SolarNodeImageInfo#toJsonEncoding} does.\n   *\n   * @param {string|Object} json the JSON to parse, or a parsed JSON object\n   * @returns {module:domain~SolarNodeImageInfo} the session instance\n   */\n  static fromJsonEncoding(json) {\n    const args = [];\n    if (json) {\n      const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n      args.push(obj.id || \"\");\n      args.push(obj.sha256 || \"\");\n      args.push(obj.contentLength || 0);\n      args.push(obj.uncompressedSha256 || \"\");\n      args.push(obj.uncompressedContentLength || 0);\n    }\n    return new SolarNodeImageInfo(...args);\n  }\n}\n\nexport default SolarNodeImageInfo;\n","/** @module net */\n\nimport {\n  Environment,\n  UrlHelper,\n  UserUrlHelperMixin\n} from \"solarnetwork-api-core\";\n\n/** The NIM default path. */\nexport const NimDefaultPath = \"/solarnode-image-maker\";\n\n/** The {@link UrlHelper} parameters key for the NIM path. */\nexport const NimPathKey = \"nimPath\";\n\n/** The NIM REST API path. */\nexport const NimApiPathV1 = \"/api/v1\";\n\n/** An {@link UrlHelper} parameter key for a NIM session key. */\nexport const NimSessionKey = \"nimSessionKey\";\n\n/**\n * Create a NimUrlHelperMixin class.\n *\n * @exports net\n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NimUrlHelperMixin} the mixin class\n */\nconst NimUrlHelperMixin = superclass =>\n  /**\n   * A mixin class that adds NIM specific support to {@link UrlHelper}.\n   *\n   * @mixin\n   * @alias module:net~NimUrlHelperMixin\n   */\n  class extends superclass {\n    /**\n     * Constructor.\n     *\n     * @param {*} args any number of arguments, but the first argument is assumed to be either an {@link Environment}\n     *                 instance or a simple object that serves as the NIM environment\n     */\n    constructor(...args) {\n      const env =\n        args && args[0]\n          ? args[0] instanceof Environment\n            ? args[0]\n            : new Environment(args[0])\n          : new Environment({\n              tls: true,\n              host: \"apps.solarnetwork.net\",\n              port: 443,\n              nimPath: NimDefaultPath\n            });\n      if (!args) {\n        args = [];\n      }\n      args[0] = env;\n      super(...args);\n    }\n\n    /**\n     * Get the base URL to the NIM v1 REST API.\n     *\n     * The returned URL uses the configured environment to resolve the `hostUrl` and the `nimPath`\n     * context path.\n     *\n     * @returns {string} the base URL to NIM\n     */\n    baseUrl() {\n      const path = this.env(NimPathKey) || NimDefaultPath;\n      return this.hostUrl() + path + NimApiPathV1;\n    }\n\n    /**\n     * A NIM session key.\n     *\n     * Configuring this value is a convenient way to avoid having to pass the key to many of the\n     * `*Url` methods that require this value.\n     *\n     * @type {string}\n     */\n    get nimSessionKey() {\n      return this.parameter(NimSessionKey);\n    }\n\n    set nimSessionKey(sessionKey) {\n      this.parameter(NimSessionKey, sessionKey);\n    }\n\n    /**\n     * Generate a URL for the \"ping\" health test URL.\n     *\n     * @returns {string} the URL\n     */\n    pingUrl() {\n      return this.baseUrl() + \"/ping\";\n    }\n\n    /**\n     * Generate a URL for authorizing a new NIM session.\n     *\n     * @returns {string} the URL\n     */\n    authorizeSessionUrl() {\n      return this.baseUrl() + \"/images/authorize\";\n    }\n\n    /**\n     * Generate a URL for listing the available base images.\n     *\n     * @returns {string} the URL\n     */\n    listBaseImagesUrl() {\n      return this.baseUrl() + \"/images/infos\";\n    }\n\n    /**\n     * Generate a URL for creating a custom image.\n     *\n     * @param {string}  imageId the ID of the base image to customize\n     * @param {string} [sessionKey] the session key returned from a call to `/images/authorize`; if not provided the {@link module:net~NimUrlHelperMixin#nimSessionKey} value will be used\n     * @returns {string} the URL\n     */\n    createImageUrl(imageId, sessionKey) {\n      const key = sessionKey || this.nimSessionKey;\n      return (\n        this.baseUrl() +\n        \"/images/create/\" +\n        encodeURIComponent(imageId) +\n        \"/\" +\n        encodeURIComponent(key)\n      );\n    }\n\n    /**\n     * Generate a URL for getting a receipt for an image creation request.\n     *\n     * @param {string}  receiptId the ID of the image creation receipt returned from a call to `/images/create/{imageId}/{sessionKey}`\n     * @param {string} [sessionKey] the session key returned from a call to `/images/authorize`; if not provided the {@link module:net~NimUrlHelperMixin#nimSessionKey} value will be used\n     * @returns {string} the URL\n     */\n    createImageReceiptUrl(receiptId, sessionKey) {\n      const key = sessionKey || this.nimSessionKey;\n      return (\n        this.baseUrl() +\n        \"/images/receipt/\" +\n        encodeURIComponent(receiptId) +\n        \"/\" +\n        encodeURIComponent(key)\n      );\n    }\n\n    /**\n     * Generate a URL for downloading a completed image file.\n     *\n     * @param {string}  receiptId the ID of the image creation receipt returned from a call to `/images/create/{imageId}/{sessionKey}`\n     * @param {string} [sessionKey] the session key returned from a call to `/images/authorize`; if not provided the {@link module:net~NimUrlHelperMixin#nimSessionKey} value will be used\n     * @returns {string} the URL\n     */\n    downloadImageUrl(receiptId, sessionKey) {\n      const key = sessionKey || this.nimSessionKey;\n      return (\n        this.baseUrl() +\n        \"/images/\" +\n        encodeURIComponent(receiptId) +\n        \"/\" +\n        encodeURIComponent(key)\n      );\n    }\n  };\n\n/**\n * A concrete {@link UrlHelper} with the {@link module:net~NimUrlHelperMixin} and\n * {@link UserUrlHelperMixin} mixins.\n *\n * @mixes NimUrlHelperMixin\n * @mixes UserUrlHelperMixin\n * @extends UrlHelper\n */\nclass NimUrlHelper extends NimUrlHelperMixin(UserUrlHelperMixin(UrlHelper)) {}\n\nexport default NimUrlHelperMixin;\nexport { NimUrlHelper };\n"],"names":["SolarNodeImageInfo","id","sha256","contentLength","uncompressedSha256","uncompressedContentLength","constructor","freeze","JSON","stringify","json","args","obj","parse","push","NimDefaultPath","NimPathKey","NimApiPathV1","NimSessionKey","NimUrlHelperMixin","env","Environment","path","hostUrl","baseUrl","imageId","sessionKey","key","nimSessionKey","encodeURIComponent","receiptId","parameter","superclass","NimUrlHelper","UserUrlHelperMixin","UrlHelper"],"mappings":"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"}