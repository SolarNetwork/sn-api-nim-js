{"version":3,"file":"solarnetwork-api-nim.es.js","sources":["../src/domain/domain.js","../src/net/nimUrlHelperMixin.js"],"sourcesContent":["// TODO\n","/** @module net */\n\nimport {\n  Environment,\n  UrlHelper,\n  UserUrlHelperMixin\n} from \"solarnetwork-api-core\";\n\n/** The NIM default path. */\nexport const NimDefaultPath = \"/solarnode-image-maker\";\n\n/** The {@link UrlHelper} parameters key for the NIM path. */\nexport const NimPathKey = \"nimPath\";\n\n/** The NIM REST API path. */\nexport const NimApiPathV1 = \"/api/v1\";\n\n/** An {@link UrlHelper} parameter key for a NIM session key. */\nexport const NimSessionKey = \"nimSessionKey\";\n\n/**\n * Create a NimUrlHelperMixin class.\n *\n * @exports net\n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NimUrlHelperMixin} the mixin class\n */\nconst NimUrlHelperMixin = superclass =>\n  /**\n   * A mixin class that adds NIM specific support to {@link UrlHelper}.\n   *\n   * @mixin\n   * @alias module:net~NimUrlHelperMixin\n   */\n  class extends superclass {\n    /**\n     * Constructor.\n     *\n     * @param {*} args any number of arguments, but the first argument is assumed to be either an {@link Environment}\n     *                 instance or a simple object that serves as the NIM environment\n     */\n    constructor(...args) {\n      const env =\n        args && args[0]\n          ? args[0] instanceof Environment\n            ? args[0]\n            : new Environment(args[0])\n          : new Environment({\n              tls: true,\n              host: \"apps.solarnetwork.net\",\n              port: 443,\n              nimPath: NimDefaultPath\n            });\n      if (!args) {\n        args = [];\n      }\n      args[0] = env;\n      super(...args);\n    }\n\n    /**\n     * Get the base URL to the NIM v1 REST API.\n     *\n     * The returned URL uses the configured environment to resolve the `hostUrl` and the `nimPath`\n     * context path.\n     *\n     * @returns {string} the base URL to NIM\n     */\n    baseUrl() {\n      const path = this.env(NimPathKey) || NimDefaultPath;\n      return this.hostUrl() + path + NimApiPathV1;\n    }\n\n    /**\n     * A NIM session key.\n     *\n     * Configuring this value is a convenient way to avoid having to pass the key to many of the\n     * `*Url` methods that require this value.\n     *\n     * @type {string}\n     */\n    get nimSessionKey() {\n      return this.parameter(NimSessionKey);\n    }\n\n    set nimSessionKey(sessionKey) {\n      this.parameter(NimSessionKey, sessionKey);\n    }\n\n    /**\n     * Generate a URL for the \"ping\" health test URL.\n     *\n     * @returns {string} the URL\n     */\n    pingUrl() {\n      return this.baseUrl() + \"/ping\";\n    }\n\n    /**\n     * Generate a URL for authorizing a new NIM session.\n     *\n     * @returns {string} the URL\n     */\n    authorizeSessionUrl() {\n      return this.baseUrl() + \"/images/authorize\";\n    }\n\n    /**\n     * Generate a URL for listing the available base images.\n     *\n     * @returns {string} the URL\n     */\n    listBaseImagesUrl() {\n      return this.baseUrl() + \"/images/infos\";\n    }\n\n    /**\n     * Generate a URL for creating a custom image.\n     *\n     * @param {string}  imageId the ID of the base image to customize\n     * @param {string} [sessionKey] the session key returned from a call to `/images/authorize`; if not provided the {@link module:net~NimUrlHelperMixin#nimSessionKey} value will be used\n     * @returns {string} the URL\n     */\n    createImageUrl(imageId, sessionKey) {\n      const key = sessionKey || this.nimSessionKey;\n      return (\n        this.baseUrl() +\n        \"/images/create/\" +\n        encodeURIComponent(imageId) +\n        \"/\" +\n        encodeURIComponent(key)\n      );\n    }\n\n    /**\n     * Generate a URL for getting a receipt for an image creation request.\n     *\n     * @param {string}  receiptId the ID of the image creation receipt returned from a call to `/images/create/{imageId}/{sessionKey}`\n     * @param {string} [sessionKey] the session key returned from a call to `/images/authorize`; if not provided the {@link module:net~NimUrlHelperMixin#nimSessionKey} value will be used\n     * @returns {string} the URL\n     */\n    createImageReceiptUrl(receiptId, sessionKey) {\n      const key = sessionKey || this.nimSessionKey;\n      return (\n        this.baseUrl() +\n        \"/images/receipt/\" +\n        encodeURIComponent(receiptId) +\n        \"/\" +\n        encodeURIComponent(key)\n      );\n    }\n\n    /**\n     * Generate a URL for downloading a completed image file.\n     *\n     * @param {string}  receiptId the ID of the image creation receipt returned from a call to `/images/create/{imageId}/{sessionKey}`\n     * @param {string} [sessionKey] the session key returned from a call to `/images/authorize`; if not provided the {@link module:net~NimUrlHelperMixin#nimSessionKey} value will be used\n     * @returns {string} the URL\n     */\n    downloadImageUrl(receiptId, sessionKey) {\n      const key = sessionKey || this.nimSessionKey;\n      return (\n        this.baseUrl() +\n        \"/images/\" +\n        encodeURIComponent(receiptId) +\n        \"/\" +\n        encodeURIComponent(key)\n      );\n    }\n  };\n\n/**\n * A concrete {@link UrlHelper} with the {@link module:net~NimUrlHelperMixin} and\n * {@link UserUrlHelperMixin} mixins.\n *\n * @mixes NimUrlHelperMixin\n * @mixes UserUrlHelperMixin\n * @extends UrlHelper\n */\nclass NimUrlHelper extends NimUrlHelperMixin(UserUrlHelperMixin(UrlHelper)) {}\n\nexport default NimUrlHelperMixin;\nexport { NimUrlHelper };\n"],"names":["NimDefaultPath","NimPathKey","NimApiPathV1","NimSessionKey","NimUrlHelperMixin","args","env","Environment","path","hostUrl","baseUrl","imageId","sessionKey","key","nimSessionKey","encodeURIComponent","receiptId","parameter","superclass","NimUrlHelper","UserUrlHelperMixin","UrlHelper"],"mappings":";;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;AAEA,AAMA;AACA,AAAO,IAAMA,iBAAiB,wBAAvB;;;AAGP,AAAO,IAAMC,aAAa,SAAnB;;;AAGP,AAAO,IAAMC,eAAe,SAArB;;;AAGP,AAAO,IAAMC,gBAAgB,eAAtB;;;;;;;;;AASP,IAAMC,oBAAoB,SAApBA,iBAAoB;;;;;;;;;;;;;;;;;wBAcD;;;0CAANC,IAAM;cAAA;;;;;YACbC,MACJD,QAAQA,KAAK,CAAL,CAAR,GACIA,KAAK,CAAL,aAAmBE,WAAnB,GACEF,KAAK,CAAL,CADF,GAEE,IAAIE,WAAJ,CAAgBF,KAAK,CAAL,CAAhB,CAHN,GAII,IAAIE,WAAJ,CAAgB;eACT,IADS;gBAER,uBAFQ;gBAGR,GAHQ;mBAILP;SAJX,CALN;YAWI,CAACK,IAAL,EAAW;iBACF,EAAP;;aAEG,CAAL,IAAUC,GAAV;2JACSD,IAhBU;;;;;;;;;;;;;;;kCA2BX;cACFG,OAAO,KAAKF,GAAL,CAASL,UAAT,KAAwBD,cAArC;iBACO,KAAKS,OAAL,KAAiBD,IAAjB,GAAwBN,YAA/B;;;;;;;;;;;;;;;;;;;;;kCAwBQ;iBACD,KAAKQ,OAAL,KAAiB,OAAxB;;;;;;;;;;;8CAQoB;iBACb,KAAKA,OAAL,KAAiB,mBAAxB;;;;;;;;;;;4CAQkB;iBACX,KAAKA,OAAL,KAAiB,eAAxB;;;;;;;;;;;;;uCAUaC,OAhGO,EAgGEC,UAhGF,EAgGc;cAC5BC,MAAMD,cAAc,KAAKE,aAA/B;iBAEE,KAAKJ,OAAL,KACA,iBADA,GAEAK,mBAAmBJ,OAAnB,CAFA,GAGA,GAHA,GAIAI,mBAAmBF,GAAnB,CALF;;;;;;;;;;;;;8CAgBoBG,SAlHA,EAkHWJ,UAlHX,EAkHuB;cACrCC,MAAMD,cAAc,KAAKE,aAA/B;iBAEE,KAAKJ,OAAL,KACA,kBADA,GAEAK,mBAAmBC,SAAnB,CAFA,GAGA,GAHA,GAIAD,mBAAmBF,GAAnB,CALF;;;;;;;;;;;;;yCAgBeG,SApIK,EAoIMJ,UApIN,EAoIkB;cAChCC,MAAMD,cAAc,KAAKE,aAA/B;iBAEE,KAAKJ,OAAL,KACA,UADA,GAEAK,mBAAmBC,SAAnB,CAFA,GAGA,GAHA,GAIAD,mBAAmBF,GAAnB,CALF;;;;+BAhFkB;iBACX,KAAKI,SAAL,CAAed,aAAf,CAAP;SAvDoB;6BA0DJS,UA1DI,EA0DQ;eACvBK,SAAL,CAAed,aAAf,EAA8BS,UAA9B;;;;MApDUM,UAPU;;CAA1B;;;;;;;;;;;IAwJMC;;;;;;;;;EAAqBf,kBAAkBgB,mBAAmBC,SAAnB,CAAlB;;;;"}