{"version":3,"sources":["../src/domain/SolarNodeImageGroup.js","../src/domain/SolarNodeImageInfo.js","../src/net/NimUrlHelperMixin.js"],"names":["SolarNodeImageGroup","componentId","componentName","items","groups","this","constructor","freeze","image","push","group","JSON","stringify","LOCALE_COMPARE_OPTIONS","Object","SolarNodeImageInfo","id","sha256","contentLength","uncompressedSha256","uncompressedContentLength","json","args","obj","parse","concat","l","r","lId","rId","localeCompare","undefined","imageList","sortedImageList","Array","isArray","slice","sort","compareById","rootGroups","groupMap","getGroup","oneId","i","len","length","groupIdComponents","split","join","toLowerCase","j","parentGroup","addGroup","addItem","NimDefaultPath","NimUrlHelperMixin","superclass","_len","_key","arguments","env","Environment","path","hostUrl","baseUrl","imageId","sessionKey","key","nimSessionKey","encodeURIComponent","receiptId","parameter","NimUrlHelper","UserUrlHelperMixin","UrlHelper"],"mappings":"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","file":"lib/solarnetwork-api-nim.min.js.map","sourcesContent":["/** @module domain */\n\n/**\n * A grouping of image infos, to support a hierarchy of images.\n */\nclass SolarNodeImageGroup {\n  /**\n   * Constructor.\n   *\n   * @param {string} componentId the full group component ID\n   * @param {string} componentName the last component from the component ID\n   */\n  constructor(componentId, componentName) {\n    /**\n     * The full group component ID.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.componentId = componentId;\n\n    /**\n     * The last component from the component ID.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.componentName = componentName;\n\n    /**\n     * The items of this group.\n     *\n     * @type {module:domain~SolarNodeImageInfo[]}\n     * @readonly\n     */\n    this.items = [];\n\n    /**\n     * The child groups of this group.\n     *\n     * @type {module:domain~SolarNodeImageGroup[]}\n     * @readonly\n     */\n    this.groups = [];\n\n    if (this.constructor === SolarNodeImageGroup) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Add an image to this group.\n   *\n   * @param {module:domain~SolarNodeImageInfo} image the image to add\n   * @returns {module:domain~SolarNodeImageGroup} this object\n   */\n  addItem(image) {\n    this.items.push(image);\n    return this;\n  }\n\n  /**\n   * Add another group as a child of this group.\n   *\n   * @param {module:domain~SolarNodeImageGroup} group the group to add\n   * @returns {module:domain~SolarNodeImageGroup} this object\n   */\n  addGroup(group) {\n    this.groups.push(group);\n    return this;\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    return JSON.stringify(this);\n  }\n}\n\nexport default SolarNodeImageGroup;\n","/** @module domain */\n\nimport SolarNodeImageGroup from \"./SolarNodeImageGroup\";\n\nconst LOCALE_COMPARE_OPTIONS = Object.freeze({\n  sensitivity: \"base\",\n  numeric: true\n});\n\n/**\n * An immutable NIM image info object.\n */\nclass SolarNodeImageInfo {\n  /**\n   * Constructor.\n   *\n   * @param {string} id a unique identifier for this image\n   * @param {string} sha256 hex-encoded SHA-256 digest of the image content\n   * @param {number} contentLength the content length of the image content, in bytes\n   * @param {string} uncompressedSha256 a hex-encoded SHA-256 digest of the image contents when uncompressed\n   * @param {number} uncompressedContentLength the size of the image contents when uncompressed, in bytes\n   */\n  constructor(\n    id,\n    sha256,\n    contentLength,\n    uncompressedSha256,\n    uncompressedContentLength\n  ) {\n    /**\n     * A unique identifier for this image.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.id = id;\n\n    /**\n     * A hex-encoded SHA-256 digest of the image content.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.sha256 = sha256;\n\n    /**\n     * The content length of the image content, in bytes.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.contentLength = contentLength;\n\n    /**\n     * A hex-encoded SHA-256 digest of the image contents when uncompressed.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uncompressedSha256 = uncompressedSha256;\n\n    /**\n     * The size of the image contents when uncompressed, in bytes.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.uncompressedContentLength = uncompressedContentLength;\n\n    if (this.constructor === SolarNodeImageInfo) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SolarNodeImageInfo} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SolarNodeImageInfo#toJsonEncoding} does.\n   *\n   * @param {string|Object} json the JSON to parse, or a parsed JSON object\n   * @returns {module:domain~SolarNodeImageInfo} the session instance\n   */\n  static fromJsonEncoding(json) {\n    const args = [];\n    if (json) {\n      const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n      args.push(obj.id || \"\");\n      args.push(obj.sha256 || \"\");\n      args.push(obj.contentLength || 0);\n      args.push(obj.uncompressedSha256 || \"\");\n      args.push(obj.uncompressedContentLength || 0);\n    }\n    return new SolarNodeImageInfo(...args);\n  }\n\n  /**\n   * Compare two `SolarNodeImageInfo` objects based on their IDs.\n   *\n   * The `id` values are compared in a case-insensitive manner, using a natural number ordering.\n   *\n   * @param {SolarNodeImageInfo} l the left-hand object to compare\n   * @param {SolarNodeImageInfo} r the right-hand object to compare\n   * @returns {number} < `0` if `l` sorts before `r`, > `0` if `l` sorts after `r`, or `0` if `l` and `r` sort equally\n   */\n  static compareById(l, r) {\n    const lId = l ? l.id : \"\";\n    const rId = r ? r.id : \"\";\n    return lId.localeCompare(rId, undefined, LOCALE_COMPARE_OPTIONS);\n  }\n\n  /**\n   * Take an array of `SolarNodeImageInfo` objects and split them into a hierarchy based on\n   * the components of their IDs.\n   *\n   * The ID components are derived by splitting the `id` values on a `-` (dash) character.\n   * They are then grouped going from left to right by component.\n   *\n   * @param {SolarNodeImageInfo[]} imageList the image infos to get a hierarchy for\n   * @returns {module:domain~SolarNodeImageGroup[]} the hierarchy as a list of groups\n   */\n  static idComponentGroups(imageList) {\n    const sortedImageList = Array.isArray(imageList) ? imageList.slice() : [];\n    sortedImageList.sort(SolarNodeImageInfo.compareById);\n    const rootGroups = [];\n    let groupMap = {};\n\n    /**\n     * Get a cached group by ID.\n     * @param {string} id the ID of the group to get\n     * @returns {SolarNodeImageGroup} the group, or `undefined`\n     */\n    function getGroup(id) {\n      for (let oneId in groupMap) {\n        if (oneId.localeCompare(id, undefined, LOCALE_COMPARE_OPTIONS) === 0) {\n          return groupMap[oneId];\n        }\n      }\n      return undefined;\n    }\n\n    for (let i = 0, len = sortedImageList.length; i < len; i += 1) {\n      let image = sortedImageList[i];\n      let groupIdComponents = image.id.split(\"-\").slice(0, -1);\n      let groupComponentId = groupIdComponents.join(\"-\").toLowerCase();\n      let group = getGroup(groupComponentId);\n      if (group === undefined) {\n        for (let j = 0, len = groupIdComponents.length; j < len; j += 1) {\n          let componentId = groupIdComponents\n            .slice(0, j + 1)\n            .join(\"-\")\n            .toLowerCase();\n          let parentGroup = getGroup(componentId);\n          if (!parentGroup) {\n            parentGroup = new SolarNodeImageGroup(\n              componentId,\n              groupIdComponents[j]\n            );\n            groupMap[componentId] = parentGroup;\n            if (group !== undefined) {\n              group.addGroup(parentGroup);\n            }\n            if (j === 0) {\n              rootGroups.push(parentGroup);\n            }\n          }\n          group = parentGroup;\n        }\n      }\n      // group _should_ be set here\n      if (group) {\n        group.addItem(image);\n      }\n    }\n    return rootGroups;\n  }\n}\n\nexport default SolarNodeImageInfo;\n","/** @module net */\n\nimport {\n  Environment,\n  UrlHelper,\n  UserUrlHelperMixin\n} from \"solarnetwork-api-core\";\n\n/** The NIM default path. */\nexport const NimDefaultPath = \"/solarnode-image-maker\";\n\n/** The {@link UrlHelper} parameters key for the NIM path. */\nexport const NimPathKey = \"nimPath\";\n\n/** The NIM REST API path. */\nexport const NimApiPathV1 = \"/api/v1\";\n\n/** An {@link UrlHelper} parameter key for a NIM session key. */\nexport const NimSessionKey = \"nimSessionKey\";\n\n/**\n * Create a NimUrlHelperMixin class.\n *\n * @exports net\n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NimUrlHelperMixin} the mixin class\n */\nconst NimUrlHelperMixin = superclass =>\n  /**\n   * A mixin class that adds NIM specific support to {@link UrlHelper}.\n   *\n   * @mixin\n   * @alias module:net~NimUrlHelperMixin\n   */\n  class extends superclass {\n    /**\n     * Constructor.\n     *\n     * @param {*} args any number of arguments, but the first argument is assumed to be either an {@link Environment}\n     *                 instance or a simple object that serves as the NIM environment\n     */\n    constructor(...args) {\n      const env =\n        args && args[0]\n          ? args[0] instanceof Environment\n            ? args[0]\n            : new Environment(args[0])\n          : new Environment({\n              tls: true,\n              host: \"apps.solarnetwork.net\",\n              port: 443,\n              nimPath: NimDefaultPath\n            });\n      if (!args) {\n        args = [];\n      }\n      args[0] = env;\n      super(...args);\n    }\n\n    /**\n     * Get the base URL to the NIM v1 REST API.\n     *\n     * The returned URL uses the configured environment to resolve the `hostUrl` and the `nimPath`\n     * context path.\n     *\n     * @returns {string} the base URL to NIM\n     */\n    baseUrl() {\n      const path = this.env(NimPathKey) || NimDefaultPath;\n      return this.hostUrl() + path + NimApiPathV1;\n    }\n\n    /**\n     * A NIM session key.\n     *\n     * Configuring this value is a convenient way to avoid having to pass the key to many of the\n     * `*Url` methods that require this value.\n     *\n     * @type {string}\n     */\n    get nimSessionKey() {\n      return this.parameter(NimSessionKey);\n    }\n\n    set nimSessionKey(sessionKey) {\n      this.parameter(NimSessionKey, sessionKey);\n    }\n\n    /**\n     * Generate a URL for the \"ping\" health test URL.\n     *\n     * @returns {string} the URL\n     */\n    pingUrl() {\n      return this.baseUrl() + \"/ping\";\n    }\n\n    /**\n     * Generate a URL for authorizing a new NIM session.\n     *\n     * @returns {string} the URL\n     */\n    authorizeSessionUrl() {\n      return this.baseUrl() + \"/images/authorize\";\n    }\n\n    /**\n     * Generate a URL for listing the available base images.\n     *\n     * @returns {string} the URL\n     */\n    listBaseImagesUrl() {\n      return this.baseUrl() + \"/images/infos\";\n    }\n\n    /**\n     * Generate a URL for creating a custom image.\n     *\n     * @param {string}  imageId the ID of the base image to customize\n     * @param {string} [sessionKey] the session key returned from a call to `/images/authorize`; if not provided the {@link module:net~NimUrlHelperMixin#nimSessionKey} value will be used\n     * @returns {string} the URL\n     */\n    createImageUrl(imageId, sessionKey) {\n      const key = sessionKey || this.nimSessionKey;\n      return (\n        this.baseUrl() +\n        \"/images/create/\" +\n        encodeURIComponent(imageId) +\n        \"/\" +\n        encodeURIComponent(key)\n      );\n    }\n\n    /**\n     * Generate a URL for getting a receipt for an image creation request.\n     *\n     * @param {string}  receiptId the ID of the image creation receipt returned from a call to `/images/create/{imageId}/{sessionKey}`\n     * @param {string} [sessionKey] the session key returned from a call to `/images/authorize`; if not provided the {@link module:net~NimUrlHelperMixin#nimSessionKey} value will be used\n     * @returns {string} the URL\n     */\n    createImageReceiptUrl(receiptId, sessionKey) {\n      const key = sessionKey || this.nimSessionKey;\n      return (\n        this.baseUrl() +\n        \"/images/receipt/\" +\n        encodeURIComponent(receiptId) +\n        \"/\" +\n        encodeURIComponent(key)\n      );\n    }\n\n    /**\n     * Generate a URL for downloading a completed image file.\n     *\n     * @param {string}  receiptId the ID of the image creation receipt returned from a call to `/images/create/{imageId}/{sessionKey}`\n     * @param {string} [sessionKey] the session key returned from a call to `/images/authorize`; if not provided the {@link module:net~NimUrlHelperMixin#nimSessionKey} value will be used\n     * @returns {string} the URL\n     */\n    downloadImageUrl(receiptId, sessionKey) {\n      const key = sessionKey || this.nimSessionKey;\n      return (\n        this.baseUrl() +\n        \"/images/\" +\n        encodeURIComponent(receiptId) +\n        \"/\" +\n        encodeURIComponent(key)\n      );\n    }\n  };\n\n/**\n * A concrete {@link UrlHelper} with the {@link module:net~NimUrlHelperMixin} and\n * {@link UserUrlHelperMixin} mixins.\n *\n * @mixes NimUrlHelperMixin\n * @mixes UserUrlHelperMixin\n * @extends UrlHelper\n */\nclass NimUrlHelper extends NimUrlHelperMixin(UserUrlHelperMixin(UrlHelper)) {}\n\nexport default NimUrlHelperMixin;\nexport { NimUrlHelper };\n"]}