{"version":3,"file":"solarnetwork-api-nim.js","sources":["../src/domain/SolarNodeImageGroup.js","../src/domain/SolarNodeImageInfo.js","../src/domain/SolarNodeImageOptions.js","../src/domain/SolarNodeImageReceipt.js","../src/net/NimUrlHelperMixin.js"],"sourcesContent":["/** @module domain */\n\n/**\n * A grouping of image infos, to support a hierarchy of images.\n */\nclass SolarNodeImageGroup {\n  /**\n   * Constructor.\n   *\n   * @param {string} componentId the full group component ID\n   * @param {string} componentName the last component from the component ID\n   */\n  constructor(componentId, componentName) {\n    /**\n     * The full group component ID.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.componentId = componentId;\n\n    /**\n     * The last component from the component ID.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.componentName = componentName;\n\n    /**\n     * The items of this group.\n     *\n     * @type {module:domain~SolarNodeImageInfo[]}\n     * @readonly\n     */\n    this.items = [];\n\n    /**\n     * The child groups of this group.\n     *\n     * @type {module:domain~SolarNodeImageGroup[]}\n     * @readonly\n     */\n    this.groups = [];\n\n    if (this.constructor === SolarNodeImageGroup) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Add an image to this group.\n   *\n   * @param {module:domain~SolarNodeImageInfo} image the image to add\n   * @returns {module:domain~SolarNodeImageGroup} this object\n   */\n  addItem(image) {\n    this.items.push(image);\n    return this;\n  }\n\n  /**\n   * Add another group as a child of this group.\n   *\n   * @param {module:domain~SolarNodeImageGroup} group the group to add\n   * @returns {module:domain~SolarNodeImageGroup} this object\n   */\n  addGroup(group) {\n    this.groups.push(group);\n    return this;\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    return JSON.stringify(this);\n  }\n}\n\nexport default SolarNodeImageGroup;\n","/** @module domain */\n\nimport SolarNodeImageGroup from \"./SolarNodeImageGroup\";\n\n/** A locale options object suitable for passing to `String.localeCompare()`. */\nconst LOCALE_COMPARE_OPTIONS = Object.freeze({\n  sensitivity: \"base\",\n  numeric: true\n});\n\n/** A regexp that looks for 8 digits at the end of the string, assuming that is a YYYYMMDD date. */\nconst DATE_LIKE_ENDING = /.*(\\d{4})(\\d{2})(\\d{2})$/;\n\n/**\n * An immutable NIM image info object.\n */\nclass SolarNodeImageInfo {\n  /**\n   * Constructor.\n   *\n   * @param {string} id a unique identifier for this image\n   * @param {string} sha256 hex-encoded SHA-256 digest of the image content\n   * @param {number} contentLength the content length of the image content, in bytes\n   * @param {string} uncompressedSha256 a hex-encoded SHA-256 digest of the image contents when uncompressed\n   * @param {number} uncompressedContentLength the size of the image contents when uncompressed, in bytes\n   */\n  constructor(id, sha256, contentLength, uncompressedSha256, uncompressedContentLength) {\n    /**\n     * A unique identifier for this image.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.id = id;\n\n    /**\n     * A hex-encoded SHA-256 digest of the image content.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.sha256 = sha256;\n\n    /**\n     * The content length of the image content, in bytes.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.contentLength = contentLength;\n\n    /**\n     * A hex-encoded SHA-256 digest of the image contents when uncompressed.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.uncompressedSha256 = uncompressedSha256;\n\n    /**\n     * The size of the image contents when uncompressed, in bytes.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.uncompressedContentLength = uncompressedContentLength;\n\n    if (this.constructor === SolarNodeImageInfo) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Get a display name based on the most specific component of this image's `id` value.\n   *\n   * The components of the `id` are based on splitting it on a `-` character. This method\n   * returns the right-most component. If that component has a date-like structure, the\n   * date will be formatted slightly.\n   *\n   * @returns {string} the display name\n   */\n  displayNameForComponent() {\n    if (!this.id) {\n      return \"\";\n    }\n    const components = this.id.split(\"-\");\n    if (components.length < 2) {\n      return this.id;\n    }\n    const name = components[components.length - 1];\n    const match = name.match(DATE_LIKE_ENDING);\n    if (match) {\n      return match[1] + \"-\" + match[2] + \"-\" + match[3];\n    }\n    return name;\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SolarNodeImageInfo} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SolarNodeImageInfo#toJsonEncoding} does.\n   *\n   * @param {string|Object} json the JSON to parse, or a parsed JSON object\n   * @returns {module:domain~SolarNodeImageInfo} the session instance\n   */\n  static fromJsonEncoding(json) {\n    const args = [];\n    if (json) {\n      const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n      args.push(obj.id || \"\");\n      args.push(obj.sha256 || \"\");\n      args.push(obj.contentLength || 0);\n      args.push(obj.uncompressedSha256 || \"\");\n      args.push(obj.uncompressedContentLength || 0);\n    }\n    return new SolarNodeImageInfo(...args);\n  }\n\n  /**\n   * Compare an ID value with this object's ID value.\n   *\n   * This method performs a case-insensitive compare similar to {@link module:domain~SolarNodeImageInfo#compareById}.\n   *\n   * @param {string} id an ID value to compare\n   * @returns {boolean} `true` if `id` matches this object's `id`\n   */\n  hasId(id) {\n    if (this.id == undefined || id === undefined) {\n      return false;\n    }\n    return this.id.localeCompare(id, undefined, LOCALE_COMPARE_OPTIONS) === 0;\n  }\n\n  /**\n   * Compare two `SolarNodeImageInfo` objects based on their IDs.\n   *\n   * The `id` values are compared in a case-insensitive manner, using a natural number ordering.\n   *\n   * @param {SolarNodeImageInfo} l the left-hand object to compare\n   * @param {SolarNodeImageInfo} r the right-hand object to compare\n   * @returns {number} < `0` if `l` sorts before `r`, > `0` if `l` sorts after `r`, or `0` if `l` and `r` sort equally\n   */\n  static compareById(l, r) {\n    const lId = l ? l.id : \"\";\n    const rId = r ? r.id : \"\";\n    return lId.localeCompare(rId, undefined, LOCALE_COMPARE_OPTIONS);\n  }\n\n  /**\n   * Take an array of `SolarNodeImageInfo` objects and split them into a hierarchy based on\n   * the components of their IDs.\n   *\n   * The ID components are derived by splitting the `id` values on a `-` (dash) character.\n   * They are then grouped going from left to right by component.\n   *\n   * @param {SolarNodeImageInfo[]} imageList the image infos to get a hierarchy for\n   * @returns {module:domain~SolarNodeImageGroup[]} the hierarchy as a list of groups\n   */\n  static idComponentGroups(imageList) {\n    const sortedImageList = Array.isArray(imageList) ? imageList.slice() : [];\n    sortedImageList.sort(SolarNodeImageInfo.compareById);\n    const rootGroups = [];\n    let groupMap = {};\n\n    /**\n     * Get a cached group by ID.\n     * @param {string} id the ID of the group to get\n     * @returns {SolarNodeImageGroup} the group, or `undefined`\n     */\n    function getGroup(id) {\n      for (let oneId in groupMap) {\n        if (oneId.localeCompare(id, undefined, LOCALE_COMPARE_OPTIONS) === 0) {\n          return groupMap[oneId];\n        }\n      }\n      return undefined;\n    }\n\n    for (let i = 0, len = sortedImageList.length; i < len; i += 1) {\n      let image = sortedImageList[i];\n      let groupIdComponents = image.id.split(\"-\").slice(0, -1);\n      let groupComponentId = groupIdComponents.join(\"-\").toLowerCase();\n      let group = getGroup(groupComponentId);\n      if (group === undefined) {\n        for (let j = 0, len = groupIdComponents.length; j < len; j += 1) {\n          let componentId = groupIdComponents\n            .slice(0, j + 1)\n            .join(\"-\")\n            .toLowerCase();\n          let parentGroup = getGroup(componentId);\n          if (!parentGroup) {\n            parentGroup = new SolarNodeImageGroup(componentId, groupIdComponents[j]);\n            groupMap[componentId] = parentGroup;\n            if (group !== undefined) {\n              group.addGroup(parentGroup);\n            }\n            if (j === 0) {\n              rootGroups.push(parentGroup);\n            }\n          }\n          group = parentGroup;\n        }\n      }\n      // group _should_ be set here\n      if (group) {\n        group.addItem(image);\n      }\n    }\n    return rootGroups;\n  }\n}\n\nexport default SolarNodeImageInfo;\n","/** @module domain */\n\n/**\n * A NIM options object.\n */\nclass SolarNodeImageOptions {\n  /**\n   * Constructor.\n   *\n   * @param {object} environment environment parameters to pass to the customization process\n   * @param {object} parameters parameters to pass to the customization process\n   * @param {boolean} verbose `true` to output verbose information during the customization process\n   */\n  constructor(environment, parameters, verbose) {\n    /**\n     * Environment parameters to pass to the customization process.\n     *\n     * The keys and values will be treated as strings.\n     *\n     * @type {object}\n     */\n    this.environment = environment;\n\n    /**\n     * Parameters to pass to the customization process.\n     *\n     * @type {object}\n     */\n    this.parameters = parameters;\n\n    /**\n     * A flag to toggle producing verbose information during the customization process.\n     *\n     * @type {boolean}\n     */\n    this.verbose = verbose;\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SolarNodeImageOptions} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SolarNodeImageOptions#toJsonEncoding} does.\n   *\n   * @param {string|Object} json the JSON to parse, or a parsed JSON object\n   * @returns {module:domain~SolarNodeImageOptions} the session instance\n   */\n  static fromJsonEncoding(json) {\n    const args = [];\n    if (json) {\n      const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n      args.push(obj.environment || undefined);\n      args.push(obj.parameters || undefined);\n      args.push(obj.verbose || undefined);\n    }\n    return new SolarNodeImageOptions(...args);\n  }\n}\n\nexport default SolarNodeImageOptions;\n","/** @module domain */\n\nimport SolarNodeImageInfo from \"./SolarNodeImageInfo\";\n\n/**\n * An immutable NIM receipt object.\n */\nclass SolarNodeImageReceipt {\n  /**\n   * Constructor.\n   *\n   * @param {string} id a unique ID for this work task\n   * @param {string} baseImageId the ID of the image that served as the starting point for this customized image\n   * @param {Date} createdDate the date the task was created\n   * @param {boolean} started flag indicating if the task has started executing\n   * @param {boolean} done flag indicating if the task has completed executing\n   * @param {boolean} cancelled flag indicating if the task was cancelled before executing completely\n   * @param {number} percentComplete the amount of work that has been completed, as a fractional percentage between `0` and `1`\n   * @param {string} message a status message\n   * @param {Date} [startedDate] the date the customization task started executing\n   * @param {Date} [completedDate] the date the customization task completed executing\n   * @param {SolarNodeImageInfo} [imageInfo] information about the final image, once ready\n   * @param {string} [downloadUrl] a URL for a direct download of the finished image\n   *\n   */\n  constructor(\n    id,\n    baseImageId,\n    createdDate,\n    started,\n    done,\n    cancelled,\n    percentComplete,\n    message,\n    startedDate,\n    completedDate,\n    imageInfo,\n    downloadUrl\n  ) {\n    /**\n     * A unique ID for this work task.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.id = id;\n\n    /**\n     * The ID of the image that served as the starting point for this customized image.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.baseImageId = baseImageId;\n\n    /**\n     * The date the task was created.\n     *\n     * @type {Date}\n     * @readonly\n     */\n    this.createdDate = createdDate;\n\n    /**\n     * A flag indicating if the task has started executing.\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.started = started;\n\n    /**\n     * A flag indicating if the task has completed executing.\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.done = done;\n\n    /**\n     * A flag indicating if the task task was cancelled before executing completely.\n     *\n     * @type {boolean}\n     * @readonly\n     */\n    this.cancelled = cancelled;\n\n    /**\n     * The amount of work that has been completed, as a fractional percentage between `0` and `1`.\n     *\n     * @type {number}\n     * @readonly\n     */\n    this.percentComplete = percentComplete;\n\n    /**\n     * A status message.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.message = message;\n\n    /**\n     * The date the customization task started executing.\n     *\n     * @type {Date}\n     * @readonly\n     */\n    this.startedDate = startedDate;\n\n    /**\n     * The date the customization task completed executing.\n     *\n     * @type {Date}\n     * @readonly\n     */\n    this.completedDate = completedDate;\n\n    /**\n     * Information about the final image, once ready.\n     *\n     * @type {SolarNodeImageInfo}\n     * @readonly\n     */\n    this.imageInfo = imageInfo;\n\n    /**\n     * A URL for a direct download of the finished image.\n     *\n     * @type {string}\n     * @readonly\n     */\n    this.downloadUrl = downloadUrl;\n\n    if (this.constructor === SolarNodeImageReceipt) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    var d = Object.assign({}, this);\n    if (this.createdDate) {\n      d.createdDate = this.createdDate.getTime();\n    }\n    if (this.startedDate) {\n      d.startedDate = this.startedDate.getTime();\n    }\n    if (this.completedDate) {\n      d.completedDate = this.completedDate.getTime();\n    }\n    return JSON.stringify(d);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SolarNodeImageReceipt} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SolarNodeImageReceipt#toJsonEncoding} does.\n   *\n   * @param {string|Object} json the JSON to parse, or a parsed JSON object\n   * @returns {module:domain~SolarNodeImageReceipt} the session instance\n   */\n  static fromJsonEncoding(json) {\n    const args = [];\n    if (json) {\n      const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n      args.push(obj.id || \"\");\n      args.push(obj.baseImageId || \"\");\n      args.push(obj.createdDate ? new Date(obj.createdDate) : null);\n      args.push(!!obj.started);\n      args.push(!!obj.done);\n      args.push(!!obj.cancelled);\n      args.push(obj.percentComplete || 0);\n      args.push(obj.message || \"\");\n      args.push(obj.startedDate ? new Date(obj.startedDate) : null);\n      args.push(obj.completedDate ? new Date(obj.completedDate) : null);\n      args.push(\n        obj.imageInfo\n          ? SolarNodeImageInfo.fromJsonEncoding(JSON.stringify(obj.imageInfo))\n          : undefined\n      );\n      args.push(obj.downloadUrl || \"\");\n    }\n    return new SolarNodeImageReceipt(...args);\n  }\n}\n\nexport default SolarNodeImageReceipt;\n","/** @module net */\n\nimport {\n  Environment,\n  UrlHelper,\n  UserUrlHelperMixin\n} from \"solarnetwork-api-core\";\n\n/** The NIM default path. */\nexport const NimDefaultPath = \"/solarnode-image-maker\";\n\n/** The {@link UrlHelper} parameters key for the NIM path. */\nexport const NimPathKey = \"nimPath\";\n\n/** The NIM REST API path. */\nexport const NimApiPathV1 = \"/api/v1\";\n\n/** An {@link UrlHelper} parameter key for a NIM session key. */\nexport const NimSessionKey = \"nimSessionKey\";\n\n/**\n * Create a NimUrlHelperMixin class.\n *\n * @exports net\n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~NimUrlHelperMixin} the mixin class\n */\nconst NimUrlHelperMixin = superclass =>\n  /**\n   * A mixin class that adds NIM specific support to {@link UrlHelper}.\n   *\n   * @mixin\n   * @alias module:net~NimUrlHelperMixin\n   */\n  class extends superclass {\n    /**\n     * Constructor.\n     *\n     * @param {*} args any number of arguments, but the first argument is assumed to be either an {@link Environment}\n     *                 instance or a simple object that serves as the NIM environment\n     */\n    constructor(...args) {\n      const env =\n        args && args[0]\n          ? args[0] instanceof Environment\n            ? args[0]\n            : new Environment(args[0])\n          : new Environment({\n              tls: true,\n              host: \"apps.solarnetwork.net\",\n              port: 443,\n              nimPath: NimDefaultPath\n            });\n      if (!args) {\n        args = [];\n      }\n      args[0] = env;\n      super(...args);\n    }\n\n    /**\n     * Get the base URL to the NIM v1 REST API.\n     *\n     * The returned URL uses the configured environment to resolve the `hostUrl` and the `nimPath`\n     * context path.\n     *\n     * @returns {string} the base URL to NIM\n     */\n    baseUrl() {\n      const path = this.env(NimPathKey) || NimDefaultPath;\n      return this.hostUrl() + path + NimApiPathV1;\n    }\n\n    /**\n     * A NIM session key.\n     *\n     * Configuring this value is a convenient way to avoid having to pass the key to many of the\n     * `*Url` methods that require this value.\n     *\n     * @type {string}\n     */\n    get nimSessionKey() {\n      return this.parameter(NimSessionKey);\n    }\n\n    set nimSessionKey(sessionKey) {\n      this.parameter(NimSessionKey, sessionKey);\n    }\n\n    /**\n     * Generate a URL for the \"ping\" health test URL.\n     *\n     * @returns {string} the URL\n     */\n    pingUrl() {\n      return this.baseUrl() + \"/ping\";\n    }\n\n    /**\n     * Generate a URL for authorizing a new NIM session.\n     *\n     * @returns {string} the URL\n     */\n    authorizeImageSessionUrl() {\n      return this.baseUrl() + \"/images/authorize\";\n    }\n\n    /**\n     * Generate a URL for listing the available base images.\n     *\n     * @returns {string} the URL\n     */\n    listBaseImagesUrl() {\n      return this.baseUrl() + \"/images/infos\";\n    }\n\n    /**\n     * Generate a URL for creating a custom image.\n     *\n     * @param {string}  imageId the ID of the base image to customize\n     * @param {string} [sessionKey] the session key returned from a call to `/images/authorize`; if not provided the {@link module:net~NimUrlHelperMixin#nimSessionKey} value will be used\n     * @returns {string} the URL\n     */\n    createImageUrl(imageId, sessionKey) {\n      const key = sessionKey || this.nimSessionKey;\n      return (\n        this.baseUrl() +\n        \"/images/create/\" +\n        encodeURIComponent(imageId) +\n        \"/\" +\n        encodeURIComponent(key)\n      );\n    }\n\n    /**\n     * Generate a URL for getting a receipt for an image creation request.\n     *\n     * @param {string}  receiptId the ID of the image creation receipt returned from a call to `/images/create/{imageId}/{sessionKey}`\n     * @param {string} [sessionKey] the session key returned from a call to `/images/authorize`; if not provided the {@link module:net~NimUrlHelperMixin#nimSessionKey} value will be used\n     * @returns {string} the URL\n     */\n    createImageReceiptUrl(receiptId, sessionKey) {\n      const key = sessionKey || this.nimSessionKey;\n      return (\n        this.baseUrl() +\n        \"/images/receipt/\" +\n        encodeURIComponent(receiptId) +\n        \"/\" +\n        encodeURIComponent(key)\n      );\n    }\n\n    /**\n     * Generate a URL for downloading a completed image file.\n     *\n     * @param {string}  receiptId the ID of the image creation receipt returned from a call to `/images/create/{imageId}/{sessionKey}`\n     * @param {string} [sessionKey] the session key returned from a call to `/images/authorize`; if not provided the {@link module:net~NimUrlHelperMixin#nimSessionKey} value will be used\n     * @returns {string} the URL\n     */\n    downloadImageUrl(receiptId, sessionKey) {\n      const key = sessionKey || this.nimSessionKey;\n      return (\n        this.baseUrl() +\n        \"/images/\" +\n        encodeURIComponent(receiptId) +\n        \"/\" +\n        encodeURIComponent(key)\n      );\n    }\n  };\n\n/**\n * A concrete {@link UrlHelper} with the {@link module:net~NimUrlHelperMixin} and\n * {@link UserUrlHelperMixin} mixins.\n *\n * @mixes NimUrlHelperMixin\n * @mixes UserUrlHelperMixin\n * @extends UrlHelper\n */\nclass NimUrlHelper extends NimUrlHelperMixin(UserUrlHelperMixin(UrlHelper)) {}\n\nexport default NimUrlHelperMixin;\nexport { NimUrlHelper };\n"],"names":["SolarNodeImageGroup","componentId","componentName","items","groups","constructor","freeze","image","push","group","JSON","stringify","LOCALE_COMPARE_OPTIONS","Object","DATE_LIKE_ENDING","SolarNodeImageInfo","id","sha256","contentLength","uncompressedSha256","uncompressedContentLength","components","split","length","name","match","undefined","localeCompare","json","args","obj","parse","l","r","lId","rId","imageList","sortedImageList","Array","isArray","slice","sort","compareById","rootGroups","groupMap","getGroup","oneId","i","len","groupIdComponents","groupComponentId","join","toLowerCase","j","parentGroup","addGroup","addItem","SolarNodeImageOptions","environment","parameters","verbose","SolarNodeImageReceipt","baseImageId","createdDate","started","done","cancelled","percentComplete","message","startedDate","completedDate","imageInfo","downloadUrl","d","assign","getTime","Date","fromJsonEncoding","NimDefaultPath","NimPathKey","NimApiPathV1","NimSessionKey","NimUrlHelperMixin","env","Environment","path","hostUrl","baseUrl","imageId","sessionKey","key","nimSessionKey","encodeURIComponent","receiptId","parameter","superclass","NimUrlHelper","UserUrlHelperMixin","UrlHelper"],"mappings":"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"}